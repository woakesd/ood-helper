using System;
using System.Collections;
using System.Data;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace OodHelper.net
{
    /// <summary>
    /// Interaction logic for TestPage.xaml
    /// </summary>
    public partial class RollingHandicapResultsPage : Page
    {
        DataTable rd;

        public RollingHandicapResultsPage(RaceEdit red)
        {
            InitializeComponent();

            RaceDate.Text = "Date of Race: " + red.RaceDate.ToShortDateString();
            EventDescription.Text = red.RaceName;
            OodName.Text = "OOD: " + red.Ood;
            Start.Text = "Start: " + red.start.Text;
            Sct.Text = "SCT: " + Common.HMS(red.scorer.StandardCorrectedTime);

            Db c = new Db("SELECT b.boatname Boat, b.boatclass [Class], b.sailno [Sail No], r.rolling_handicap as Hcap, " +
                "r.fintime Finish, r.elapsed Elapsed, r.laps Laps, r.corrected Corrected, r.place Pos, " +
                "r.achieved_handicap Achp, r.new_rolling_handicap [New\nhcap], r.performance_index PI, r.c C, r.a A, " +
                "r.handicap_status PY " +
                "FROM boats b INNER JOIN races r ON r.bid = b.bid " +
                "WHERE r.rid = @rid " +
                "ORDER BY place");
            Hashtable p = new Hashtable();
            p["rid"] = red.Rid;

            rd = c.GetData(p);
            foreach (DataRow r in rd.Rows)
            {
                if ((int)r["Pos"] == 999)
                {
                    r["elapsed"] = DBNull.Value;
                    r["laps"] = DBNull.Value;
                    r["corrected"] = DBNull.Value;
                    r["Pos"] = DBNull.Value;
                    r["achp"] = DBNull.Value;
                    r["pi"] = DBNull.Value;
                    r["nhcp"] = DBNull.Value;
                    r["c"] = DBNull.Value;
                    r["a"] = DBNull.Value;
                    r["py"] = DBNull.Value;
                }
            }
            Results.ItemsSource = rd.DefaultView;
        }

        private void Results_Loaded(object sender, RoutedEventArgs e)
        {
        }

        private void Results_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGridTextColumn col = (DataGridTextColumn)Results.Columns[rd.Columns["elapsed"].Ordinal];
            Binding b = (Binding)col.Binding;
            b.Converter = new IntTimeSpan();
            col.Binding = b;

            col = (DataGridTextColumn)Results.Columns[rd.Columns["corrected"].Ordinal];
            b = (Binding)col.Binding;
            b.Converter = new DoubleTimeSpan();
            col.Binding = b;

            double Width = this.Width - 96;
            Results.Columns[0].Width = Width * .168;
            Results.Columns[1].Width = Width * .16;
            Results.Columns[2].Width = Width * .088;
            Results.Columns[3].Width = Width * .048;
            Results.Columns[4].Width = Width * .072;
            Results.Columns[5].Width = Width * .072;
            Results.Columns[6].Width = Width * .04;
            Results.Columns[7].Width = Width * .072;
            Results.Columns[8].Width = Width * .04;
            Results.Columns[9].Width = Width * .048;
            Results.Columns[10].Width = Width * .048;
            Results.Columns[11].Width = Width * .048;
            Results.Columns[11].CellStyle = this.Resources["RightAlignCell"] as Style;
            Results.Columns[11].HeaderStyle = this.Resources["RightAlignHeader"] as Style;
            Results.Columns[12].Width = Width * .012;
            Results.Columns[13].Width = Width * .012;
            Results.Columns[14].Width = Width * .016;
        }
    }
}
