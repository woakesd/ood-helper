using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace OodHelper.net
{
    /// <summary>
    /// Interaction logic for RaceEdit.xaml
    /// </summary>
    [Svn("$Id$")]
    public partial class SeriesDisplay : UserControl
    {
        private DataTable rd;
        private Hashtable caldata;

        public SeriesDisplay(SeriesResult r)
        {
            InitializeComponent();

            _result = r;

            LoadGrid();
        }

        SeriesResult _result;

        private int CompareByDate(SeriesEvent x, SeriesEvent y)
        {
            if (x.Date > y.Date)
                return 1;
            else if (x.Date < y.Date)
                return -1;
            return 0;
        }

        public void LoadGrid()
        {
            rd = new DataTable();
            rd.Columns.Add("bid", typeof(int));
            rd.Columns.Add("Boat name", typeof(string));
            rd.Columns.Add("Boat class", typeof(string));
            rd.Columns.Add("Sail no", typeof(string));
            rd.Columns.Add("Entered", typeof(double));
            rd.Columns.Add("Score", typeof(double));

            List<SeriesEvent> events = new List<SeriesEvent>(_result._SeriesData.Values);
            events.Sort(CompareByDate);
            int i = 1;
            foreach (SeriesEvent se in events)
            {
                rd.Columns.Add("R" + i.ToString());
                i++;
            }

            Db c = new Db("SELECT boatname, boatclass, sailno " +
                "FROM boats " +
                "WHERE bid = @bid");
            Hashtable p = new Hashtable();
            foreach (BoatSeriesResult bsr in _result._Results)
            {
                DataRow r = rd.NewRow();
                r["bid"] = bsr.bid;
                r["Entered"] = bsr.count;
                r["Score"] = bsr.nett;

                p["bid"] = bsr.bid;
                Hashtable bd = c.GetHashtable(p);
                if (bd.Count > 0)
                {
                    r["Boat name"] = bd["boatname"];
                    r["Boat class"] = bd["boatclass"];
                    r["Sail no"] = bd["sailno"];
                }

                i = 1;
                foreach (SeriesEntry sent in bsr.dateSortedPoints)
                {
                    r["R" + i] = sent.Points;
                    i++;
                }
                rd.Rows.Add(r);
            }
            rd.AcceptChanges();

            Races.ItemsSource = rd.DefaultView;
        }

        void Races_AutoGeneratedColumns(object sender, EventArgs e)
        {
        }

        private void DataGridCell_PreviewKeyDown(object sender, KeyEventArgs e)
        {
        }

        void DataGridCell_KeyUp(object sender, KeyEventArgs e)
        {
        }

        private void DataGridCell_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
        }

        void Races_PreparingCellForEdit(object sender, DataGridPreparingCellForEditEventArgs e)
        {
        }

        void Races_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
        }

        private void buttonCalculate_Click(object sender, RoutedEventArgs e)
        {
        }

        private void Races_CurrentCellChanged(object sender, EventArgs e)
        {
        }
    }
}
